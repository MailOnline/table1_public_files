#!/usr/bin/env bash
set -e

function handle_exit () {
    [ $DEBUG ] && echo >&2 "Script exit detected"
    exit 1;
}

trap "handle_exit" EXIT
trap "handle_exit" ERR

function usage() {
    if [ "$1" ]; then
        echo "Error: $1"
        echo ""
    fi
    echo ""
    echo "USAGE:"
    echo "        install_from_sinopia [-htdDr] VERSION"
    echo ""
    echo " -d         : output debug logging"
    echo " -h         : help"
    echo " -D dir     : dir to install version into"
    echo " -t token   : provide npm auth token"
    echo " -r repo    : host:port of npm repo"
    echo " -l         : create local link dt => path to deploy tools"
    echo " -f         : force install a previous version"
    echo ""
    echo "DESCRIPTION:"
    echo "        Will download deploy tools from sinopia and return the path it has downloaded to"
    echo ""
    echo ""
    echo ""
    if [ $sourced ]; then
        echo "Sourced"
        return;
    else 
        exit 1;
    fi
}
base_dir=/var/tmp/deploy_tools

while getopts ":ldhD:t:r:" opt; do
  case $opt in
    h)
      usage
      ;;
    d)
      DEBUG=true
      set -x
      ;;
    D)
      base_dir=$OPTARG
      ;;
    t)
      npm_token=$OPTARG
      ;;
    r)
      npm_repo=$optarg
      ;;
    l)
      local_link=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

shift $(( OPTIND -1  ))
version=$1


if [ -z "$version" ]; then
  usage "No version supplied"
  return 1;
fi

if [ ! -d "$base_dir" ]; then
    [ $DEBUG ] && echo >&2  "$base_dir does not exist, making it"
    mkdir -p "$base_dir"
fi

temp_dir=$(mktemp -d $base_dir/_deploy_tools_${version}_XXXXXXXXX)

[ $DEBUG ] && echo >&2 "Installing Deploy Tools version: $version into $temp_dir "

# load nvm if not loaded
if ! type npm > /dev/null; then
    if ! nvm --version; then
        . ~/.nvm/nvm.sh
        nvm use 6
    fi
fi

echo "Node: "$(node -v)  " Npm: " $(npm -v)

# set registry/repo if provided
if [ "$npm_repo" ]; then
   echo >&2 "Seting Repo: $registry_set"
    npm config set registry http://$npm_repo/
fi

# establish value of repo that is set
registry_set=$(grep 'registry='  ~/.npmrc | cut -d= -f2)
[ $DEBUG ] && echo >&2 "Registry: $registry_set"
if [ -z "$registry_set" ]; then
    usage "No registry set and npm_repo not provided"
    return 1;
fi

# set token if provided
if [ "$npm_token" ]; then
    echo >&2 "Seting Token: $npm_token for repo $registry_set"
    npm set //$registry_set/:_authToken $npm_token
fi

token_reg=$(echo "$registry_set" | cut -d: -f2)
# establish value of token
is_token_set=$(grep authToken ~/.npmrc | grep "$token_reg")
[ $DEBUG ] && echo >&2 "Token: $is_token_set"
if [ -z "$is_token_set" ]; then
    usage "No X_NPM_TOKEN provided or authToken found in ~/.npmrc"
    return 1;
fi

pushd $temp_dir > /dev/null
npm init -y > /dev/null
npm install --save @mol-platform/deploy_tools@$version > .npminstalllog 2>&1

ln -sf node_modules/@mol-platform/deploy_tools dt
installed_version=$(npm list --long --parseable @mol-platform/deploy_tools  | cut -d: -f2 | sed 's/.*@//')
popd > /dev/null

 
if [ -d "$base_dir/$installed_version" ]; then
  if [ $force_deploy ]; then
      rm -rf "$base_dir/$installed_version"
      mv $temp_dir $base_dir/$installed_version
  else
      echo >&2 "WARN: $installed_version already exists, use -f to replace"
  fi
else
  mv $temp_dir $base_dir/$installed_version
fi

final_dir=$base_dir/$installed_version

profile_path=$final_dir/dt/profile
[ $DEBUG ] &&  echo ProfilePath: $profilePath

# Do not change the following output as it will be used by calling scripts.
echo "InstallDir: $final_dir"
echo "ProfilePath: $profile_path"

if [ "$local_link" ]; then 
    ln -sf $final_dir/dt ./dt
    echo "LocalLink: ./dt"
fi



