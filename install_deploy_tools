#!/usr/bin/env bash
set -e

# determine if sourced
# from https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced/23009039#23009039
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] || 
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
         printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] || 
  [[ -n $BASH_VERSION && $0 != "$BASH_SOURCE" ]]) && sourced=1 || sourced=0

#function handle_exit () {
#    echo >&2 "Script exit detected $sourced"
#
#    if [ $sourced -gt 0 ]; then
#        echo "Not exiting"
#        return;
#    else 
#        echo "Exiting"
#        exit 1;
#    fi
#}
#trap "handle_exit" EXIT
#trap "handle_exit" ERR


function usage() {

    if [ "$1" ]; then
        echo "Error: $1"
        echo ""
    fi
    echo ""
    echo "USAGE:"
    echo "        install_from_sinopia [-htdDr] VERSION"
    echo ""
    echo " -d         : output debug logging"
    echo " -h         : help"
    echo " -D dir     : dir to install into (will create if it does not exist)"
    echo " -t token   : provide npm auth token"
    echo " -r repo    : host:port of npm repo"
   # echo " -p         : source profile after installing"
    echo ""
    echo "DESCRIPTION:"
    echo "        Will download deploy tools from sinopia and return the path it has downloaded to"
    if [ $sourced ]; then
        echo "Sourced"
        return;
    else 
        exit 1;
    fi
}

DEBUG=false

while getopts ":dphD:t:r:" opt; do
  case $opt in
    h)
      usage
      ;;
    d)
      DEBUG=true
      set -x
      ;;
    D)
      dir=$OPTARG
      ;;
    t)
      npm_token=$OPTARG
      ;;
    r)
      npm_repo=$optarg
      ;;
    p)
      source_profile=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

shift $(( OPTIND -1  ))
version=$1


if [ -z "$version" ]; then
  usage "No version supplied"
  return 1;
fi

if [ -z "$dir" ]; then
    dir=$(mktemp -d /var/tmp/deploy_tools_${version}_XXXXXXXXX)
    [ $DEBUG ] && echo >&2 "Using temporary dir: $dir"
else 
    if [ ! -d "$dir" ]; then
        [ $DEBUG ] && echo >&2  "$dir does not exist, making it"
        mkdir -p "$dir"
    fi
fi

[ $DEBUG ] && echo >&2 "Installing Deploy Tools version: $version into $dir "


# load nvm if not loaded
if ! type node > /dev/null; then
    if ! nvm --version; then
        . ~/.nvm/nvm.sh
    fi
fi

# set registry/repo if provided
if [ "$npm_repo" ]; then
   echo >&2 "Seting Repo: $registry_set"
    npm config set registry http://$npm_repo/
fi

# establish value of repo that is set
registry_set=$(grep 'registry='  ~/.npmrc | cut -d= -f2)
[ $DEBUG ] && echo >&2 "Registry: $registry_set"
if [ -z "$registry_set" ]; then
    usage "No registry set and npm_repo not provided"
    return 1;
fi

# set token if provided
if [ "$npm_token" ]; then
    echo >&2 "Seting Token: $npm_token for repo $registry_set"
    npm set //$registry_set/:_authToken $npm_token
fi

token_reg=$(echo "$registry_set" | cut -d: -f2)
# establish value of token
is_token_set=$(grep authToken ~/.npmrc | grep "$token_reg")
[ $DEBUG ] && echo >&2 "Token: $is_token_set"
if [ -z "$is_token_set" ]; then
    usage "No X_NPM_TOKEN provided or authToken found in ~/.npmrc"
    return 1;
fi

pushd $dir > /dev/null
npm init -y > /dev/null
npm install @mol-platform/deploy_tools@$version > .npminstalllog 2>&1
[ $DEBUG ] &&  echo InstallDir: $dir
ln -sf node_modules/@mol-platform/deploy_tools dt
popd > /dev/null

profile_path=$dir/dt/profile
[ $DEBUG ] &&  echo ProfilePath: $profilePath
echo "---------------------------------------------------"
echo "Now run: . $profile_path to use"

